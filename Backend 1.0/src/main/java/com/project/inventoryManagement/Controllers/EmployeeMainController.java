package com.project.inventoryManagement.Controllers;


import com.project.inventoryManagement.Models.DeletedEmployeesModel;
import com.project.inventoryManagement.Models.EmployeeMainModel;
import com.project.inventoryManagement.Repositories.DeletedEmployeesRepo;
import com.project.inventoryManagement.Repositories.EmployeeMainRepository;
import com.project.inventoryManagement.Service.DeletedEmployeeMapping;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;


// @CrossOrigin(origins = "*",allowedHeaders = "*")
@RestController
@RequestMapping(value = "/employees")
@CrossOrigin
public class  EmployeeMainController {


    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private EmployeeMainRepository empMainRepo;


    @Autowired
    private PasswordEncoder bcryptEncoder;

    @Autowired
    private DeletedEmployeeMapping deletedEmployeeMapping;

    @Autowired
    private DeletedEmployeesRepo deletedEmployeesRepo;







/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Get all the employees as an array
    @GetMapping(path="/all")
    public @ResponseBody
    Iterable<EmployeeMainModel> getAllUsers() {
        // This returns a JSON or XML with the users
        return empMainRepo.findAll();
    }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // Register a new employee & update an employee
    @PostMapping(path="/add") // Map ONLY POST Requests
    public EmployeeMainModel addNewEmployee(@RequestBody EmployeeMainModel m1) {

      System.out.println(m1.toString());


      if(empMainRepo.findByEmail(m1.getEmail()) != null || empMainRepo.findByNic(m1.getNic()) != null){   // Update an existing user
          System.out.println("Same email-"+ m1.getEmail()+" found. Values are updated");
          EmployeeMainModel exUser = empMainRepo.findByNic(m1.getNic());
          String newContactNo, newstatus, newaddress, newlocation;
          newContactNo = m1.getContactNo();
          newstatus = m1.getStatus();
          newaddress = m1.getAddress();
          newlocation = m1.getLocation();

          if(m1.getStatus() == null){
              newstatus = exUser.getStatus();
          }
          if(m1.getContactNo() == null){
              newContactNo = exUser.getContactNo();
          }
         if(m1.getAddress() == null) {
             newaddress = exUser.getAddress();
         }
         if(m1.getLocation() == null)
             newlocation = exUser.getLocation();

         System.out.println("Updating...");
         empMainRepo.updateEmployee(m1.getNic(),newContactNo,newstatus,newaddress,newlocation);
          System.out.println("Updated");
      }
      else {

          m1.setPassword(bcryptEncoder.encode(m1.getPassword()));   // encoded password using bcrption
          m1.setUnblocked(true);

          if(m1.getLocation() == null)
              m1.setLocation("-");

          empMainRepo.save(m1);


      }
        return empMainRepo.findByNic(m1.getNic());
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      // Delete an employee by Nic
    @DeleteMapping(path = "/delete")
    public boolean deleteEmployeeByNic(@RequestParam String nic) throws Exception {
        System.out.println("delete nic received: "+ nic);

            EmployeeMainModel m1 = empMainRepo.findByNic(nic);

            if(m1.getStatus().equals("Asset Manager") || m1.getStatus().equals("CEO")){
                throw new Exception("Deleting Not Allowed");
            }

            DeletedEmployeesModel dm = deletedEmployeeMapping.mapToDeletedEmployeeModel(m1);
            deletedEmployeesRepo.save(dm);
            System.out.println("Deleted employee saved to deleteed table\nNow deleting...");

            empMainRepo.deleteByNic(nic);
            System.out.println("Deleted");
            return true;


    }
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // Block a user from accessing the app

        @GetMapping(path = "/blockuser")
        public int blockEmployee(@RequestParam String nic){

             System.out.println("blocking the following nic: "+ nic);
             EmployeeMainModel mm = empMainRepo.findByNic(nic);

             //if asset Manager, blocking not allowed
             if(mm.getStatus().equals("Asset Manager")){
                 System.out.println("Asset Mananger blocking himself.\nNot Allowed for that");
                 return -100;
             }


             return empMainRepo.blockEmployee(nic);


        }


    //////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // Unblock a user from accessing the app

    @GetMapping(path = "/unblockuser")
    public int unBlockEmployee(@RequestParam String nic){
        System.out.println("blocking the following nic: "+ nic);


        return empMainRepo.unblockEmployee(nic);


    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
